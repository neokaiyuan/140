			+--------------------+
			| CS 140             |
			| PROJECT 1: THREADS |
			| DESIGN DOCUMENT    |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Devon Hinton <dhinton@stanford.edu>
Peter Hu <peterhu@stanford.edu>
Kai-Yuan Neo <kneo@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Describe briefly which parts of the assignment were implemented by
>> each member of your team. If some team members contributed significantly
>> more or less than others (e.g. 2x), indicate that here.

Devon Hinton: AC - 1/3;
Peter Hu: AC - 1/3;
Kai-Yuan Neo: AC - 1/3;

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#1: struct sleepingThread
/* defines the elements stored in wait_list */
struct sleepingThread {
  struct list_elem elem;
  int64_t ticksNeeded;
  struct thread *thread;
};

Purpose: The sleepingThread struct contains information necessary for the
waking of a thread after timer_sleep has been called. It contains the 
absolute tick number after which it should be woken.

#2: list wait_list
/* list that keeps track of waiting threads */
static struct list wait_list

Purpose: This is the list that contains sleepingThread structs in sorted
order that we look at every time a system tick goes by to check if any
threads need to be woken.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

After timer_sleep is called, we calculate the time at which this thread would
want to be woken up by adding the ticks argument to the current absolute ticks,
and then calling our helper function sleepThread, implemented in thread.c.
sleepThread initializes a sleepingThread struct and populates it with a pointer
to the current thread and stores the release time (in ticks). It then inserts t
hat struct into our wait_list, maintaining the sorted order of the list, before
disabling interrupts and blocking the thread. 

When the timer interrupt handler is called, the absolute ticks count is
incremented, and then our helper function wakeReadyThreads is called (defined
in thread.c). wakeReadyThreads takes in the argument of the number of ticks,
and iterates through the wait list, waking up every thread it encounters until
it reaches a thread that does not need to be woken up (does not wake this one).
Each thread that is woken up is removed from the wait list and subsequently
unblocked.

Back in the timer interrupt function, after wakeReadyThreads returns,
thread_tick is called. 

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

We maintain a sorted linked list to ensure that our function wakeReadyThreads
only checks at most as many sleepingThread structs as it needs to wake up plus
one.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

There is no shared memory access in timer_sleep, however the wait_list 
variable is shared in sleepThread, which is called by timer_sleep. Thus we 
disable interrupts at the beginning of the sleepThread function in order to 
prevent messing up the wait list. Interrupts are enabled again in the function
schedule called in thread_block.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Again, there is no shared memory accessed in timer_sleep, only in sleepThread
which is called from timer_sleep. In sleepThread we have disabled interrupts
in the first line, which prevents any race conditions with regard to the
shared memory wait_list.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This design is modular and hierarchical. It makes sense that the functions
that deal with sleeping and waking threads are written in thread.c, and the
code that deals with incrementing and passing tick counts are written in
timer.c.

Another design we considered was to write all our functions in timer.c as well
as to declare our sleepingThread struct and wait_list there (statically). Thus
while the intratracies of blocking/unblocking threads would be dealt with in
module thread.c, access to which threads where blocked (via sleep) would 
be accessible in timer.c, via the wait_list (and sleepingThread structs there
contained). One could imagine a situation where a thread must be unblocked yet
no access is available to it, due to this violation of modularity. It does not 
make sense to store threads in one file and access them in another.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

scheduler holds a sorted list

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

lock_acquire()
check what priority that lock's holder currently has
update if necessary
after the update, we need to do the same thing for the lock just updated
to cater for nested donation

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

priority_set(next priority)
schedule

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

could have the case where one thread tries to change priority of another 
thread just before that thread calls thread_set_priority() internally.
This would result in a race condition where the receiving thread may
revert back to another priority right after a higher priority has been
donated, and as a result fail to run.

To mitigate this we include the code for thread_set_priority and schedule()
in synch.c and thread.c respectively.

alternatively we could have the case where a thread is switched in the middle
of donating its priority, and when it resumes it donates priority to a thread
that does not need to run.

to mitigate this we can put priority donation in sema_down.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.





---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0      0   0   0  63   
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
